1. 时间就是生命
1.1 高效代码的意义-时间就是生命，时间就是金钱
1.2 代码刨析-没有调查，就没有发言权 profile工具
项目开发主要受到质量，成本，进度三要素的制约，软件性能优化不可能无休止的进行下去，达到要求后就要收山
因此好刚必须要用在刀刃上，我们得知道哪些代码值得优化，哪些代码不值得优化。（IBM Rational Quantify Intel VTune AMD CodeAnalyst）

2. 减少指令数-勤俭持家
程序是由一条一条得指令组成，要执行的程序指令数减少了，自然执行时间也就减少了
2.1 使用更快的算法-算法，程序设计的灵魂
2.2 选用合适的指令- 合适的人做合适的事
2.3 降低数据精度-比特也要省着用
2.4 减少函数使用-不要老打断我
2.5 空间换时间-我们总在走，却忘了时间
2.6 减少过保护-打不破的部门墙

3. 减少处理器不擅长的操作
每种处理器都有自己擅长与不擅长的操作
单周期指令是处理器最喜欢的，不仅执行时间短，而且利于流水线执行，加减逻辑运算
乘除，分支指令，浮点指令，内存取存操作等，常常需要较多的始终周期，我们在编程时，就应该减少使用执行时间长的指令
3.1 少用乘法
定点乘法在DSP种需要两个cycle，而位移操作只要一个cycle
3.2 少用除法 求余
除法，求余需要消耗大量的时间，很多处理器没有相应的指令，是通过软件来实现的，应尽量少用
3.3 在精度允许的条件下，将浮点数定点化
3.4 尽量减少分支，现在的处理器都是流水线结构，if和switch 等语句会带来跳转，而跳转会打乱流水线的正常执行，影响程序的执行效率
3.5 将最可能进入的分支放在if中 而不是else中

4.优化内存访问-别让包袱拖垮了你
执行指令只是处理器要做的很少一部分工作，处理器还要从存储器种取指令，从存储器种将数据导入到寄存器种，等算完后，再将结果存入到存储器中
4.1 少使用数组， 少使用指针
4.2 少用全局变量
4.3 一次多访问一些数据
4.4 数据对齐访问
4.5 大数据结构时的cache line 对齐
4.6 程序，数据访问符合cache的时间，空间局部性
4.7 多线程编程时，避免false sharing
4.8 自己管理内存动态分配
4.9 隐藏数据搬移时间

5. 充分利用编译器进行优化 编译器：我才是优化第一高手
5.1 编译器的结构
5.2 编译器提供了几级优化选项-分级管理
5.3 编译器会计算常量








